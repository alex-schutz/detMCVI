#!/usr/bin/python3

import numpy as np
import networkx as nx
import sys
import random
from CTP_generator import ctp_to_file


def load_graph(
    nodes,
    edge_start_ids,
    edge_end_ids,
    edge_costs,
    stoch_edge_start_ids,
    stoch_edge_end_ids,
    stoch_edge_scores,
):
    # Create an empty directed graph
    G = nx.Graph()

    # Add all the nodes
    G.add_nodes_from(nodes)

    # Add the edges with the 'weight' attribute
    for start, end, cost in zip(edge_start_ids, edge_end_ids, edge_costs):
        G.add_edge(start, end, weight=cost)

    # Add the 'blocked_prob' attribute to the relevant edges
    for start, end, score in zip(
        stoch_edge_start_ids, stoch_edge_end_ids, stoch_edge_scores
    ):
        if G.has_edge(start, end):
            G[start][end]["blocked_prob"] = score
        else:
            raise RuntimeError(f"Expected edge {start}_{end}")

    return G


# fmt: off
nodes = [1, 2, 6, 9, 11, 14, 18, 22, 24, 27, 30, 32, 36, 38, 39, 40, 41, 43, 47, 50, 54, 57, 58, 59, 61, 62, 66, 69, 73, 75, 76, 80, 84, 87, 92, 94, 97, 98, 99, 101, 102, 108, 111, 115, 118, 120, 123, 127, 130, 134, 135, 137, 221, 223, 226, 234]
edge_start_ids = [1, 38, 39, 40, 39, 57, 58, 36, 54, 61, 75, 97, 98, 101, 99, 97, 134, 39, 38, 58, 30, 2, 115, 32, 27, 87, 36, 2, 94, 94, 39, 41, 84, 2, 6, 94, 92, 24, 62, 27, 69, 118, 115, 76, 32, 76, 221, 135, 9, 11, 18, 14, 43, 80, 76, 123, 127, 108, 24, 36, 30, 99, 22, 130, 111, 73, 50, 66, 47, 47, 22, 75, 102, 102, 108, 118, 62, 97, 18, 69, 66, 1, 36, 9, 50, 11, 101, 59, 59, 120, 98, 50, 118, 6, 80, 92, 75]
edge_end_ids = [2, 39, 40, 41, 57, 58, 59, 59, 61, 62, 76, 98, 99, 102, 120, 99, 135, 41, 57, 221, 87, 127, 137, 223, 87, 226, 54, 234, 97, 123, 54, 43, 87, 6, 9, 226, 94, 92, 66, 30, 73, 120, 118, 80, 36, 102, 223, 137, 11, 14, 22, 18, 47, 84, 108, 127, 130, 111, 27, 38, 32, 101, 24, 134, 115, 75, 54, 69, 50, 66, 94, 108, 108, 135, 137, 127, 221, 130, 92, 80, 84, 130, 223, 123, 66, 123, 118, 223, 221, 130, 127, 62, 134, 127, 97, 226, 120]
edge_costs = [1.0366843938827515, 1.0963903665542603, 1.095942497253418, 1.0091201066970825, 1.5665544271469116, 1.1034995317459106, 1.019964575767517, 1.6042250394821167, 1.3916740417480469, 1.1529104709625244, 1.1529231071472168, 1.0500808954238892, 1.2487624883651733, 1.3050310611724854, 1.2817814350128174, 2.298818826675415, 1.0238898992538452, 1.9316502809524536, 1.0282256603240967, 1.478731393814087, 2.651732921600342, 3.9989302158355713, 3.1567797660827637, 3.1029212474823, 3.005357265472412, 2.9063923358917236, 2.7895383834838867, 3.798736572265625, 3.57950758934021, 2.53360652923584, 3.62361216545105, 2.4340240955352783, 3.565783739089966, 4.64850378036499, 3.5128726959228516, 4.931519985198975, 2.283743143081665, 4.4898881912231445, 4.342657089233398, 3.2582554817199707, 4.638794898986816, 2.246900796890259, 3.549166679382324, 4.301112651824951, 4.261964321136475, 4.118381977081299, 2.1892285346984863, 2.1872687339782715, 2.1790215969085693, 3.437047243118286, 4.458247661590576, 4.261058330535889, 4.355869293212891, 4.231439113616943, 3.9524178504943848, 4.310975551605225, 3.1624772548675537, 3.1409451961517334, 3.255725383758545, 2.147822856903076, 2.1346757411956787, 2.1075141429901123, 2.1067116260528564, 4.142826080322266, 4.025764465332031, 1.9849423170089722, 4.453464031219482, 3.144089937210083, 3.0531070232391357, 6.352810859680176, 6.48881721496582, 3.1369378566741943, 5.224290370941162, 8.027682304382324, 8.065381050109863, 5.982461929321289, 7.109212398529053, 6.914524078369141, 7.734538555145264, 3.520467758178711, 5.677493095397949, 2.4061033725738525, 2.4888052940368652, 5.786336421966553, 3.5026092529296875, 6.749170303344727, 1.8322887420654297, 1.939146637916565, 1.1526044607162476, 5.0492119789123535, 5.280936241149902, 3.103715658187866, 4.850697994232178, 3.9849438667297363, 6.984862327575684, 3.330843925476074, 7.944096088409424]
stoch_edge_start_ids = [47, 22, 75, 102, 102, 108, 118, 62, 97, 18, 69, 66, 1, 36, 9, 50, 11, 101, 59, 59, 120, 98, 50, 118, 6, 80, 92, 75]
stoch_edge_end_ids = [66, 94, 108, 108, 135, 137, 127, 221, 130, 92, 80, 84, 130, 223, 123, 66, 123, 118, 223, 221, 130, 127, 62, 134, 127, 97, 226, 120]
stoch_edge_scores = [random.random() for _ in stoch_edge_start_ids]
# fmt: on

G = load_graph(
    nodes,
    edge_start_ids,
    edge_end_ids,
    edge_costs,
    stoch_edge_start_ids,
    stoch_edge_end_ids,
    stoch_edge_scores,
)
spl = dict(nx.all_pairs_dijkstra_path_length(G))
while True:
    goal = random.choice(nodes)
    origin = random.choice(nodes)
    if spl[goal][origin] >= 25:
        break
# goal = int(np.argmax([spl[nodes[0]][nodes[i]] for i in range(len(nodes))]))
# origin = int(np.argmax([spl[nodes[goal]][nodes[i]] for i in range(len(nodes))]))
print(spl[goal][origin])
with open("/home/alex/ori/detMCVI/experiments/CTP/field_map.txt", "w") as f:
    ctp_to_file(G, origin, goal, f)
